---
title: Configuring docs
jupyter:
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---

## Site configuration

quartodoc is configured by adding a `quartodoc` section to your `_quarto.yml`:

```yaml
quartodoc:
  style: pkgdown
  dir: reference
  package: quartodoc
  sections:
    - title: Some functions
      desc: Functions to inspect docstrings.
      contents:
        - get_object
        - preview
```

### Top-level options

The `quartodoc` section takes a `style` field, specifying which [](`quartodoc.Builder`)
to use (currently "pkgdown" or "single-page"; see [Examples](/examples/)).

```{python}
#| echo: false
#| output: asis
from quartodoc import get_object, MdRenderer

obj = get_object("quartodoc", "Builder")
renderer = MdRenderer()

doc_parts = obj.docstring.parsed
doc_params = [entry for entry in doc_parts if entry.kind.name == "parameters"][0]
print(renderer.render(doc_params))
```

### Section options

The `sections` field defines which functions to document.

It requires three pieces of configuration:

* title: a title for the section
* desc: a description for the section
* contents: a list of functions to document

## Content configuration

Individual content entries (e.g. a function to be documented) can also be customized.
For example, if you are documenting a python class, you may want to include or exclude
documentation on specific methods on that class.

Specify content options by setting `name: <content name>`, along with any additional options.

For example, below is a piece of content, MdRenderer, specified without options.

```yaml
contents:
  - MdRenderer
```

We set it to only document its render method, by setting `name: MdRenderer` followed by the
`members` option.

```yaml
contents:
  - name: MdRenderer
    members:
      - render
```

TODO: kinds of content, link to advanced layouts

## Looking up objects

Finding python objects to document involves two pieces of configuration:

* the package name.
* a list of objects for content.

Note that quartodoc can look up anything---whether functions, modules, classes, attributes, or methods.

```yaml
quartodoc:
  package: quartodoc
  sections:
    - title: Some section
      desc: ""
      contents:
        - get_object        # function: quartodoc.get_object
        - ast.preview       # submodule func: quartodoc.ast.preview
        - MdRenderer        # class: quartodoc.MdRenderer
        - MdRenderer.render # method: quartodoc.MDRenderer.render
        - renderers         # module: quartodoc.renderers
```

The functions listed in `contents` are assumed to be imported from the package.

## Module and class members

Documentation for modules and classes can automatically include their members (e.g. class methods and attributes; everything defined inside a module).

There are four styles for presenting child members:

```{python}
#| echo: false
#| output: asis

# print out the attributes table of ChoicesChildren 
# this is overkill, but maybe a nice case of dogfooding
from quartodoc import get_object, MdRenderer
from quartodoc.builder.utils import extract_type
from griffe.docstrings.dataclasses import DocstringSectionAttributes

renderer = MdRenderer()
choices = get_object("quartodoc.layout.ChoicesChildren")
res = extract_type(DocstringSectionAttributes, choices.docstring.parsed)[0]

print(renderer.render(res))
```

You can specify a style by setting the `children` option in the config:

```yaml
quartodoc:
  package: quartodoc
  sections:
    - title: Some section
      desc: ""
      contents:

        # set the children option, so that methods get documented
        # on separate pages. MdRenderer's docs will include a summary
        # table that links to each page.
        - name: quartodoc.MdRenderer
          children: separate
```