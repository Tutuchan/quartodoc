---
title: "Components: Auto, blueprint, collect"
jupyter:
  jupytext:
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.14.5
  kernelspec:
    display_name: Python 3 (ipykernel)
    language: python
    name: python3
---

```{python}
from quartodoc import collect, preview
from quartodoc import MdRenderer
from quartodoc import layout
import yaml
```

### `Auto`: Config Options

The `Auto` class contains data about how you wish to render a specific Python object, which you typically set in configuration options via the `quartodoc` section of your `_quarto.yml` file.  In other words, `Auto` is a data structure that represents the configuration options for a specific Python object.

In the [previous](dev-big-picture.qmd) section, be demonstrated how we can find the `Auto` object corresponding to the `MdRenderer` class from our yaml configuration:

We can find the `Auto` object corresponding to the python object from our yaml configuration like this:

```{python}
import yaml
from quartodoc import Builder

cfg = yaml.safe_load("""
quartodoc:
  package: quartodoc
  style: pkgdown
  sections:
    - title: "Some section"
      desc: "Some description"
      contents:
        - name: MdRenderer
          members: ["render", "summarize"]
          children: separate
""")

builder = Builder.from_quarto_config(cfg)
auto_from_yml = builder.layout.sections[0].contents[0]
print(auto_from_yml)
```

We can see many of the configuration options such as `members`, `name` and `children` as well as other options we didn't specify but are set to their default values.  For example, we didn't set the option for [`dynamic`](basic-content.qmd#dynamic-lookup) but it is set to `false` by default.

However, we don't have to start with `yaml` files to create an `Auto` object.  We can also create an `Auto` object with the fully qualified name of any Python object.  For example, we can create an `Auto` object for the `MdRenderer` class like this:
```{python}
from quartodoc import Auto
auto = Auto(name = "quartodoc.MdRenderer", signature_name = 'short')
print(auto)
```

However, since we didn't specify any options, this is not the same `Auto` that we got from the yaml.  For example, the `members` option is not set to `["render", "summarize"]` as it was in the yaml.  Instead, it is set to `None` which means that all members will be included.  We can see this by looking at the `obj` attribute of the `Auto` object:

```{python}
print(auto.members)
```

To set this option, we can pass it to the `Auto` constructor:

```{python}
auto = Auto(name = "quartodoc.MdRenderer", 
            members = ["render", "summarize"]
        )

assert auto.members == auto_from_yml.members
print(auto)
```

Understanding how `Auto` an object created is helpful in case you need to debug `quartodoc`.  If you find that a configuration option is not being set as you expect, you can create an `Auto` object for the Python object in question and compare it to the `Auto` object that you expect to be created from your yaml configuration.

## Blueprint: create a renderable doc recipe

### From Auto

```{python}
from quartodoc import blueprint
doc = blueprint(auto)
doc
```

```{python}
preview(doc.obj.docstring, max_depth=2)
```

### Layout and Section

```{python}
lay = layout.Layout(
    sections = [
      layout.Section(title = "A section", desc = "A description", contents = [auto])
    ]
)
```


:::::: {.columns}

::: {.column}

```{python}
# raw layout
preview(lay, compact=True)
```

:::
::: {.column}

```{python}
bp_layout = blueprint(lay)
preview(bp_layout, max_depth=5, compact=True)
```

:::

::::::

### Grouping docs on single Page

### Class members

```{python}
auto_separate = layout.Auto(name = "quartodoc.MdRenderer", children = "separate")
auto_embedded = layout.Auto(name = "quartodoc.MdRenderer", children = "embedded")
```

:::::: {.columns}

::: {.column}
```{python}
bp_embedded = blueprint(auto_embedded)
preview(bp_embedded, max_depth=2)
```
:::
::: {.column}
```{python}
bp_separate = blueprint(auto_separate)
preview(bp_separate, max_depth=2)
```
:::

::::::


## Collect: fetch all pages and items


```{python}
some_page = layout.Page(path = "some_doc_page", contents = [doc])
pages, items = collect(some_page, "reference")
pages
```

